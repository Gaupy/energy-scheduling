open Scanf ;;
open Printf ;;


let nheur = 8 in
let tab = Array.make nheur (0.,0.) in
let break = ref true in
let workon = ref false in
let lambda_0 = ref 0.000001 in
let ratio = 1.5 in (*chose Ã  changer*) (* 1.1 ; 1.5 ; 2.5*)
let arretes = ref 0 in

let buff = ref (open_out ("lambda_"^(string_of_float ratio)^"_"^"0"^"_"^(string_of_int !arretes))) in 

while !break do
      printf "ici%!" ;
  try
    while true do
      printf "test%!" ;
      let e0 = (scanf " %f " (fun f -> f)) in
      let e1 = (scanf " %f " (fun f -> f)) in
      let e2 = (scanf " %f " (fun f -> f)) in
      let e3 = (scanf " %f " (fun f -> f)) in
      let e4 = (scanf " %f " (fun f -> f)) in
      let e5 = (scanf " %f " (fun f -> f)) in
      let e6 = (scanf " %f " (fun f -> f)) in
        tab.(0) <- (1.,e0/.e1) ;
        tab.(1) <- (1.,1.) ;
	if e1 < 0. then failwith "Erreur dans l'energie de fr" ; 
        if e2 > 0. then (let r2 = e2/.e1 in let (j,r) = tab.(2) in tab.(2)<-(j+.1.,r+.r2)) ;
        if e3 > 0. then (let r3 = e3/.e1 in let (j,r) = tab.(3) in tab.(3)<-(j+.1.,r+.r3)) ;
        if e4 > 0. then (let r4 = e4/.e1 in let (j,r) = tab.(4) in tab.(4)<-(j+.1.,r+.r4)) ;
        if e5 > 0. then (let r5 = e5/.e1 in let (j,r) = tab.(5) in tab.(5)<-(j+.1.,r+.r5)) ;
        if e6 > 0. then (let r6 = e6/.e1 in let (j,r) = tab.(6) in tab.(6)<-(j+.1.,r+.r6)) ;
	let eB = min e2 (min e3 (min e4 (min e5 e6))) in 
	if eB > 0. then (let (j,r) = tab.(7) in tab.(7)<-(j+.1.,r+.(eB/.e1))) ;
    done
  with
    |Scan_failure _ ->
      begin
        printf "encore%!" ;
        if !workon then
          (      
            workon := false ;
            fprintf !buff "%f\t" !lambda_0 ;
            for i = 0 to nheur-1 do
              let j,r = tab.(i) in
                if j=0. then fprintf !buff "-1.\t"
                else fprintf !buff "%f\t" (r/.j) ;
                tab.(i)<-(0.,0.)
            done ;
            fprintf !buff "\n"
           ) ;
        let s,f = (scanf " %s@= %f " (fun s f -> s,f)) in
          match s with
           | "nombre de procs " -> close_out !buff ; buff := open_out ("lambda_"^(string_of_float ratio)^"_"^(string_of_int (int_of_float f))^"_"^(string_of_int !arretes))
           | "lambda_0 " -> lambda_0 := f
           | "ratio " -> if  f = ratio then workon := true
           | "nombre d'arretes sur 100 noeuds " ->  arretes := int_of_float f
           | _ -> failwith "string inconnue"
      end
    |End_of_file -> 
      begin
        break := false ;
        fprintf !buff "%f\t" !lambda_0 ;
        if !workon then
          for i = 0 to nheur-1 do
            let j,r = tab.(i) in
              if j=0. then fprintf !buff "-1.\t"
              else fprintf !buff "%f\t" (r/.j) ;
              tab.(i)<-(0.,0.)
          done
         else () ;
        fprintf !buff "\n" ;
      end
     | _ -> ()
done

